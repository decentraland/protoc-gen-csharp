// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: codegen.test
// file: test/api_test.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
using Google.Protobuf.WellKnownTypes;
namespace Codegen.Test {
public interface IBookService<Context>
{

  UniTask<Book> GetBook(GetBookRequest request, Context context, CancellationToken ct);

  IUniTaskAsyncEnumerable<Book> QueryBooks(QueryBooksRequest request, Context context);

  UniTask<Book> GetBookStream(IUniTaskAsyncEnumerable<GetBookRequest> streamRequest, Context context, CancellationToken ct);

  IUniTaskAsyncEnumerable<Book> QueryBooksStream(IUniTaskAsyncEnumerable<GetBookRequest> streamRequest, Context context);

  UniTask<Empty> Empty(Empty request, Context context, CancellationToken ct);

}

public static class BookServiceCodeGen
{
  public const string ServiceName = "BookService";

  public static void RegisterService<Context>(RpcServerPort<Context> port, IBookService<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("GetBook", async (payload, context, ct) => { var res = await service.GetBook(GetBookRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.serverStreamDefinition.Add("QueryBooks", (payload, context) => { return ProtocolHelpers.SerializeMessageEnumerator<Book>(service.QueryBooks(QueryBooksRequest.Parser.ParseFrom(payload), context)); });
    result.clientStreamDefinition.Add("GetBookStream", async (IUniTaskAsyncEnumerable<ByteString> payload, Context context, CancellationToken ct) => {
      return (await service.GetBookStream(
        ProtocolHelpers.DeserializeMessageEnumerator<GetBookRequest>(payload, s => GetBookRequest.Parser.ParseFrom(s)), context, ct))?.ToByteString();
    });
    result.bidirectionalStreamDefinition.Add("QueryBooksStream", (IUniTaskAsyncEnumerable<ByteString> payload, Context context) => {
      return ProtocolHelpers.SerializeMessageEnumerator<Book>(service.QueryBooksStream(
        ProtocolHelpers.DeserializeMessageEnumerator<GetBookRequest>(payload, s => GetBookRequest.Parser.ParseFrom(s)), context));
    });
    result.definition.Add("Empty", async (payload, context, ct) => { var res = await service.Empty(Empty.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
